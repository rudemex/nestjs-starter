name: "CI/CD"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ '18.20.4', '20.16.0', '22.5.1' ]
    name: "Build"
    steps:
      - name: "‚öô Set up NodeJS v${{ matrix.node }}"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: "‚úÖ Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "üíæ Restore packages from cache"
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "ü¶â GitGuardian scan"
        uses: GitGuardian/ggshield-action@master
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

      - name: "üì¶ Install packages"
        run: yarn install

      - name: "üíÖ Lint"
        run: yarn lint

      - name: "üî® Build"
        run: yarn build

      - name: "üë®‚Äçüíª Run Test"
        run: yarn test
        env:
          NODE_ENV: 'test'

      - name: "üìä Publish Test Report"
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: "Test Report (${{ matrix.node }})"
          path: './junit.xml'
          reporter: jest-junit

      - name: "üìä Upload coverage report to Codecov"
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: "üìä SonarCloud Scan"
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}
            -Dsonar.projectName=${{ github.repository_owner }}_${{ github.event.repository.name }}
            -Dsonar.projectVersion=1.0
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.sources=./src
            -Dsonar.exclusions=**/*.bin,node_modules/**,test/**,**/__test__/**,**/__mocks__/**,src/main.ts
            -Dsonar.coverage.exclusions=node_modules/**,test/**,**/__test__/**,**/__mocks__/**,src/main.ts
            -Dsonar.testExecutionReportPaths=test-report.xml
            -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      #- name: "ü¶† Snyk to check for vulnerabilities"
      #  uses: snyk/actions/node@master
      #  env:
      #    SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: "üê≥ Docker"
        run: |
          docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
          docker build --build-arg NODE_VERSION=${{ matrix.node }}-alpine -t ${{ github.event.repository.name }} .
